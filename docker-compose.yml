# EuroLink_WarehouseSystem/docker-compose.yml

services:
  # --- 后端服务 ---
  backend:
    build: ./backend # 指向后端Dockerfile所在的目录
    ports:
      - "3002:3001" # 将主机的3002端口映射到容器的3001端口
    environment:
      # 在这里集中管理所有环境变量，而不是用.env文件
      - NODE_ENV=production
      - DB_HOST=db # 关键：使用服务名'db'作为主机名
      - DB_USER=postgres
      - DB_PASSWORD=Kaiyue0121 # 生产环境应使用强密码
      - DB_NAME=warehouse_system_db
      - DB_PORT=5432
      - JWT_SECRET=Xz!94@qW&vB7
      - PORT=3001
    command: >
      sh -c "
        echo 'Waiting for database to be healthy...' &&
        node /app/src/scripts/syncDb.js &&
        echo 'Database synced.' &&
        node /app/src/scripts/seedAdmin.js &&
        echo 'Admin user seeded.' &&
        node /app/src/app.js
      "
    depends_on:
      db:
        condition: service_healthy # 确保db服务先于backend启动
    networks:
      - app-network

  # --- 前端服务 ---
  frontend:
    build: ./frontend
    ports:
      - "8080:80" # 将主机的8080端口映射到Nginx容器的80端口
    depends_on:
      - backend # 确保backend服务先于frontend启动
    networks:
      - app-network

  # --- 数据库服务 ---
  db:
    image: postgres:15-alpine # 直接使用官方的PostgreSQL镜像
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=Kaiyue0121 # 密码必须和backend的环境变量一致
      - POSTGRES_DB=warehouse_system_db
    volumes:
      - postgres_data:/var/lib/postgresql/data # 数据持久化
    ports:
      - "5433:5432" # 将主机的5433端口映射到容器的5432端口（避免与本地已安装的冲突）
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d warehouse_system_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

# 定义网络和卷
networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local